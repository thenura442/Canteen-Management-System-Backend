{
  "stats": {
    "suites": 7,
    "tests": 48,
    "passes": 48,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-18T09:53:53.237Z",
    "end": "2023-05-18T09:54:11.291Z",
    "duration": 18054,
    "testsRegistered": 48,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d530c5cd-f16e-4e2e-8aff-21e8eeaccd02",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "083455fe-ea9a-4294-8bc8-e7d95e5fba28",
          "title": "Common Routes Tests",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\basic.tests.js",
          "file": "\\tests\\basic.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return server status",
              "fullTitle": "Common Routes Tests should return server status",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get('/')\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
              "err": {},
              "uuid": "c218089c-dcee-4f8a-b1d5-88c8833d1d96",
              "parentUUID": "083455fe-ea9a-4294-8bc8-e7d95e5fba28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c218089c-dcee-4f8a-b1d5-88c8833d1d96"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "d40a6569-ab17-4ff4-8a3a-63edb3d1854f",
          "title": "Cart Routes Tests Suite",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\cart.tests.js",
          "file": "\\tests\\cart.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return cart created message as success",
              "fullTitle": "Cart Routes Tests Suite should return cart created message as success",
              "timedOut": false,
              "duration": 4192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "e599dbd3-01fe-4dab-bb9e-7872e89bc32b",
              "parentUUID": "d40a6569-ab17-4ff4-8a3a-63edb3d1854f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the Cart information of the Customer",
              "fullTitle": "Cart Routes Tests Suite should return the Cart information of the Customer",
              "timedOut": false,
              "duration": 264,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get')\n  .send({customer_email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.customer_email,res.body.customer_email,err)\n    chai.assert.equal(mock.findObject.store_email,res.body.store_email,err)\n    chai.assert.equal(mock.findObject.sub_total,res.body.sub_total,err)\n    done();\n});",
              "err": {},
              "uuid": "9e9bddfa-5034-4f37-a1e9-726fe4ed0dc5",
              "parentUUID": "d40a6569-ab17-4ff4-8a3a-63edb3d1854f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update cart details and return updated cart details",
              "fullTitle": "Cart Routes Tests Suite should update cart details and return updated cart details",
              "timedOut": false,
              "duration": 533,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.updateObject.customer_email,res.body.customer_email,err)\n    chai.assert.equal(mock.updateObject.store_email,res.body.store_email,err)\n    chai.assert.equal(mock.updateObject.sub_total,res.body.sub_total,err)\n    done();\n});",
              "err": {},
              "uuid": "574a303c-9809-4db8-b17d-d0a43736343a",
              "parentUUID": "d40a6569-ab17-4ff4-8a3a-63edb3d1854f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete cart item details and return success",
              "fullTitle": "Cart Routes Tests Suite should delete cart item details and return success",
              "timedOut": false,
              "duration": 558,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/item')\n  .send({ id : \"I-AA81881\" , customer_email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "c6d4a80e-db5c-471e-8e2f-75dc67682647",
              "parentUUID": "d40a6569-ab17-4ff4-8a3a-63edb3d1854f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete cart record that was created",
              "fullTitle": "Cart Routes Tests Suite should delete cart record that was created",
              "timedOut": false,
              "duration": 276,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete')\n  .send({customer_email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "b8fd036b-d1f9-4c94-84e8-4d09316dd1f7",
              "parentUUID": "d40a6569-ab17-4ff4-8a3a-63edb3d1854f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e599dbd3-01fe-4dab-bb9e-7872e89bc32b",
            "9e9bddfa-5034-4f37-a1e9-726fe4ed0dc5",
            "574a303c-9809-4db8-b17d-d0a43736343a",
            "c6d4a80e-db5c-471e-8e2f-75dc67682647",
            "b8fd036b-d1f9-4c94-84e8-4d09316dd1f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5823,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
          "title": "Customer Routes Tests Suite",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\customer.tests.js",
          "file": "\\tests\\customer.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "463b7c0e-07b1-4f82-a111-6eda353426f9",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer created message as success",
              "fullTitle": "Customer Routes Tests Suite should return customer created message as success",
              "timedOut": false,
              "duration": 626,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "1d20f0e8-9c2c-461c-b9c8-fc579e0dc8e7",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Customer Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "3a2d363c-b374-4d3e-bdc8-fe40bdb62ef0",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as success",
              "fullTitle": "Customer Routes Tests Suite should return customer login as success",
              "timedOut": false,
              "duration": 356,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/mobile')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password , type : mock.mockLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"tester122@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "02f1e2da-9688-4f34-8f15-01ecb5b69d19",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer login as Incorrect Username or Password",
              "fullTitle": "Customer Routes Tests Suite should return customer login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/mobile')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password , type : mock.mockFalseLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "3c464308-7c70-49db-a65e-78581866afa9",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Customer Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.first_name,res.body.first_name,err)\n    chai.assert.equal(mock.findObject.last_name,res.body.last_name,err)\n    chai.assert.equal(mock.findObject.nic,res.body.nic,err)\n    chai.assert.equal(mock.findObject.dob,res.body.dob,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.address,res.body.address,err)\n    chai.assert.equal(mock.findObject.access,res.body.access,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "868a628b-5af7-43a0-a3f3-2a173281e032",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 272,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "eae2819f-0fba-4c1b-9dc6-dbc302819cdd",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return that email needs to be valid",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "fa794ce0-6ad0-4b7e-87c0-9a0462410e88",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that mobile number needs 10 characters",
              "fullTitle": "Customer Routes Tests Suite should return that mobile number needs 10 characters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "8d013b2c-cc77-4a36-bbc8-041fc4df3321",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Mobile and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer Mobile and return success",
              "timedOut": false,
              "duration": 262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/mobile')\n  .send({ email : \"tester122@gmail.com\" , mobile_no : \"0771193382\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "f074c636-ba85-4161-bdf6-109ff90a1cd1",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 716,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester123\" , new_password : \"tester1234\" , retype_new_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "6599d23b-adc2-48ce-9dc2-e8164f0bcc3d",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Customer Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 353,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester12345\" , new_password : \"tester1234\" , retype_new_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "ac838cf5-b861-458d-8f48-3abda56b8d17",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Customer Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "75cc13fe-bb47-49d3-a9aa-055bff829578",
              "parentUUID": "30a272fb-1741-4dad-bf8e-41d37b5c1370",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "463b7c0e-07b1-4f82-a111-6eda353426f9",
            "1d20f0e8-9c2c-461c-b9c8-fc579e0dc8e7",
            "3a2d363c-b374-4d3e-bdc8-fe40bdb62ef0",
            "02f1e2da-9688-4f34-8f15-01ecb5b69d19",
            "3c464308-7c70-49db-a65e-78581866afa9",
            "868a628b-5af7-43a0-a3f3-2a173281e032",
            "eae2819f-0fba-4c1b-9dc6-dbc302819cdd",
            "fa794ce0-6ad0-4b7e-87c0-9a0462410e88",
            "8d013b2c-cc77-4a36-bbc8-041fc4df3321",
            "f074c636-ba85-4161-bdf6-109ff90a1cd1",
            "6599d23b-adc2-48ce-9dc2-e8164f0bcc3d",
            "ac838cf5-b861-458d-8f48-3abda56b8d17",
            "75cc13fe-bb47-49d3-a9aa-055bff829578"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3816,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
          "title": "Employee Routes Tests Suite",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\employee.tests.js",
          "file": "\\tests\\employee.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Employee Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "d6897124-7a3f-46af-b51e-1e0f58f2e5af",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return employee created message as success",
              "fullTitle": "Employee Routes Tests Suite should return employee created message as success",
              "timedOut": false,
              "duration": 630,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "db3a56c0-0aea-4867-b929-957c09d10f79",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Employee Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "7afa86be-af25-4b47-9d17-044a2a4367a0",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return employee login as success",
              "fullTitle": "Employee Routes Tests Suite should return employee login as success",
              "timedOut": false,
              "duration": 343,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/web')\n  .send({ email : mock.mockLoginObject.email , password : mock.mockLoginObject.password , type : mock.mockLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"tester122@gmail.com\",res.body.email,err)\n    done();\n});",
              "err": {},
              "uuid": "91dcc25e-183a-42c8-9b70-3cbceba48f84",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return employee login as Incorrect Username or Password",
              "fullTitle": "Employee Routes Tests Suite should return employee login as Incorrect Username or Password",
              "timedOut": false,
              "duration": 355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post('/api/auth/login/web')\n  .send({ email : mock.mockFalseLoginObject.email , password : mock.mockFalseLoginObject.password , type : mock.mockFalseLoginObject.type})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email or Password is Incorrect\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "8d3fa182-3079-4289-9af6-6ed8ef1d25e4",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Employee Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.first_name,res.body.first_name,err)\n    chai.assert.equal(mock.findObject.last_name,res.body.last_name,err)\n    chai.assert.equal(mock.findObject.nic,res.body.nic,err)\n    chai.assert.equal(mock.findObject.dob,res.body.dob,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.address,res.body.address,err)\n    chai.assert.equal(mock.findObject.access,res.body.access,err)\n    chai.assert.equal(mock.findObject.type,res.body.type,err)\n    chai.assert.equal(mock.findObject.vendor,res.body.vendor,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "22b18e5b-3573-4388-8908-65c9b73e19a5",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Employee Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 281,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "91006d3a-2313-428f-a66e-3f24ff2371d1",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email needs to be valid",
              "fullTitle": "Employee Routes Tests Suite should return that email needs to be valid",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "589d74a3-1d0d-48ee-8827-4859493b939e",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Employee Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 687,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/pass')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester123\" , new_password : \"tester1234\" , retype_new_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "56d2bc5b-1047-4ea4-87a0-e162df12ea95",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Employee Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/pass')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester12345\" , new_password : \"tester1234\" , retype_new_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "774db9a3-f6b8-408b-a0f5-8a1817aa1ea2",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Employee Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "7d01d87c-e962-4554-8180-2a61f77349c0",
              "parentUUID": "6a64ed9a-acf2-4748-8b65-79e05358d66c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6897124-7a3f-46af-b51e-1e0f58f2e5af",
            "db3a56c0-0aea-4867-b929-957c09d10f79",
            "7afa86be-af25-4b47-9d17-044a2a4367a0",
            "91dcc25e-183a-42c8-9b70-3cbceba48f84",
            "8d3fa182-3079-4289-9af6-6ed8ef1d25e4",
            "22b18e5b-3573-4388-8908-65c9b73e19a5",
            "91006d3a-2313-428f-a66e-3f24ff2371d1",
            "589d74a3-1d0d-48ee-8827-4859493b939e",
            "56d2bc5b-1047-4ea4-87a0-e162df12ea95",
            "774db9a3-f6b8-408b-a0f5-8a1817aa1ea2",
            "7d01d87c-e962-4554-8180-2a61f77349c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3456,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "1a600ef2-61a4-4e98-803d-e2a4788e8910",
          "title": "Item Routes Tests Suite",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\item.tests.js",
          "file": "\\tests\\item.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return item description needs to be atleast 6 letters long",
              "fullTitle": "Item Routes Tests Suite should return item description needs to be atleast 6 letters long",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"description\" length must be at least 6 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "859e77b0-3508-4a9d-a8c6-0387abd80eba",
              "parentUUID": "1a600ef2-61a4-4e98-803d-e2a4788e8910",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return item created message as success and its ID",
              "fullTitle": "Item Routes Tests Suite should return item created message as success and its ID",
              "timedOut": false,
              "duration": 261,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "9214bea8-0de8-4763-8268-0c21583781ee",
              "parentUUID": "1a600ef2-61a4-4e98-803d-e2a4788e8910",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the item information",
              "fullTitle": "Item Routes Tests Suite should return the item information",
              "timedOut": false,
              "duration": 268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({id : \"I-121212_Test\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id,res.body.id,err)\n    chai.assert.equal(mock.findObject.item_name,res.body.item_name,err)\n    chai.assert.equal(mock.findObject.vendor,res.body.vendor,err)\n    chai.assert.equal(mock.findObject.description,res.body.description,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    chai.assert.equal(mock.findObject.type,res.body.type,err)\n    chai.assert.equal(mock.findObject.meal_type,res.body.meal_type,err)\n    chai.assert.equal(mock.findObject.price,res.body.price,err)\n    chai.assert.equal(mock.findObject.availability,res.body.availability,err)\n    done();\n});",
              "err": {},
              "uuid": "85c82ea5-2e10-4406-b050-b42741c72726",
              "parentUUID": "1a600ef2-61a4-4e98-803d-e2a4788e8910",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the search List including only the test item",
              "fullTitle": "Item Routes Tests Suite should return the search List including only the test item",
              "timedOut": false,
              "duration": 274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/search/list')\n  .send({search : \"Test Item Name\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length ,err)\n    done();\n});",
              "err": {},
              "uuid": "9a273161-b431-43da-980a-2485df9a35f4",
              "parentUUID": "1a600ef2-61a4-4e98-803d-e2a4788e8910",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update item details and return success",
              "fullTitle": "Item Routes Tests Suite should update item details and return success",
              "timedOut": false,
              "duration": 556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "e75b4b75-c09c-4976-8e86-80f74d1823f6",
              "parentUUID": "1a600ef2-61a4-4e98-803d-e2a4788e8910",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "859e77b0-3508-4a9d-a8c6-0387abd80eba",
            "9214bea8-0de8-4763-8268-0c21583781ee",
            "85c82ea5-2e10-4406-b050-b42741c72726",
            "9a273161-b431-43da-980a-2485df9a35f4",
            "e75b4b75-c09c-4976-8e86-80f74d1823f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1366,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "e4f7a8b2-eda7-4884-b6e6-f4341309e228",
          "title": "Order Routes Tests Suite",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\order.tests.js",
          "file": "\\tests\\order.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return Order created message as success",
              "fullTitle": "Order Routes Tests Suite should return Order created message as success",
              "timedOut": false,
              "duration": 277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/create')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "22e1bad4-9d57-4e75-8b76-26384280cc2f",
              "parentUUID": "e4f7a8b2-eda7-4884-b6e6-f4341309e228",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the Order information",
              "fullTitle": "Order Routes Tests Suite should return the Order information",
              "timedOut": false,
              "duration": 260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({id : \"Test_O-23443933\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.customer_email,res.body.customer_email,err)\n    chai.assert.equal(mock.findObject.store_email,res.body.store_email,err)\n    chai.assert.equal(mock.findObject.total,res.body.total,err)\n    done();\n});",
              "err": {},
              "uuid": "71ac8f64-826e-498a-b16b-aed47389cbec",
              "parentUUID": "e4f7a8b2-eda7-4884-b6e6-f4341309e228",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all the Orders of the Test Store",
              "fullTitle": "Order Routes Tests Suite should return all the Orders of the Test Store",
              "timedOut": false,
              "duration": 260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get')\n  .send({store_email : \"teststore@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "96bfeae9-1714-470b-8a9d-9ea027b6f478",
              "parentUUID": "e4f7a8b2-eda7-4884-b6e6-f4341309e228",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all the Orders of the Customer",
              "fullTitle": "Order Routes Tests Suite should return all the Orders of the Customer",
              "timedOut": false,
              "duration": 264,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/user/orders')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length,err)\n    done();\n});",
              "err": {},
              "uuid": "8bec1868-86e6-4b2b-a432-7f401d35f24a",
              "parentUUID": "e4f7a8b2-eda7-4884-b6e6-f4341309e228",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update order status and return success message",
              "fullTitle": "Order Routes Tests Suite should update order status and return success message",
              "timedOut": false,
              "duration": 255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/status')\n  .send({id : \"Test_O-23443933\" , status : \"in progress\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "7b27cb92-b4db-439c-912a-f54076068d33",
              "parentUUID": "e4f7a8b2-eda7-4884-b6e6-f4341309e228",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update order details and return success message",
              "fullTitle": "Order Routes Tests Suite should update order details and return success message",
              "timedOut": false,
              "duration": 266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/status')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "559d1916-fdf5-4299-a2b4-fb7e6b723c8a",
              "parentUUID": "e4f7a8b2-eda7-4884-b6e6-f4341309e228",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete cart record that was created",
              "fullTitle": "Order Routes Tests Suite should delete cart record that was created",
              "timedOut": false,
              "duration": 288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({id : \"Test_O-23443933\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "651ab3e5-ea69-495c-b4f3-c1e204ea4d7a",
              "parentUUID": "e4f7a8b2-eda7-4884-b6e6-f4341309e228",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "22e1bad4-9d57-4e75-8b76-26384280cc2f",
            "71ac8f64-826e-498a-b16b-aed47389cbec",
            "96bfeae9-1714-470b-8a9d-9ea027b6f478",
            "8bec1868-86e6-4b2b-a432-7f401d35f24a",
            "7b27cb92-b4db-439c-912a-f54076068d33",
            "559d1916-fdf5-4299-a2b4-fb7e6b723c8a",
            "651ab3e5-ea69-495c-b4f3-c1e204ea4d7a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1870,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "e6d56949-830a-49a9-85bc-61c83f078762",
          "title": "Vendor Routes Tests Suite",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\vendor.tests.js",
          "file": "\\tests\\vendor.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return Vendor description needs to be atleast 6 letters long",
              "fullTitle": "Vendor Routes Tests Suite should return Vendor description needs to be atleast 6 letters long",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"description\" length must be at least 6 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "9a560727-d379-4d89-a850-e0cf31958c41",
              "parentUUID": "e6d56949-830a-49a9-85bc-61c83f078762",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return vendor created message as success",
              "fullTitle": "Vendor Routes Tests Suite should return vendor created message as success",
              "timedOut": false,
              "duration": 556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "34e72826-2803-4e62-a55b-915793e74432",
              "parentUUID": "e6d56949-830a-49a9-85bc-61c83f078762",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the vendor information",
              "fullTitle": "Vendor Routes Tests Suite should return the vendor information",
              "timedOut": false,
              "duration": 265,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({email : \"teststore@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.vendor_name,res.body.vendor_name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.description,res.body.description,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.access,res.body.access,err)\n    done();\n});",
              "err": {},
              "uuid": "c000e474-7bcf-482e-9968-c2423c995c87",
              "parentUUID": "e6d56949-830a-49a9-85bc-61c83f078762",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update vendor record that was created",
              "fullTitle": "Vendor Routes Tests Suite should update vendor record that was created",
              "timedOut": false,
              "duration": 540,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "1f5283ba-ec74-4aa9-9a2d-b494139b0d40",
              "parentUUID": "e6d56949-830a-49a9-85bc-61c83f078762",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should recieve invalid mobile when updating vendor record that was created",
              "fullTitle": "Vendor Routes Tests Suite should recieve invalid mobile when updating vendor record that was created",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "9519c1ba-1234-4383-896e-88ee96b750aa",
              "parentUUID": "e6d56949-830a-49a9-85bc-61c83f078762",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete vendor record that was created",
              "fullTitle": "Vendor Routes Tests Suite should delete vendor record that was created",
              "timedOut": false,
              "duration": 254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({email : \"teststore@gmail.com\" , url : \"https://canteen-management-system-nsbm.s3.ap-south-1.amazonaws.com/test_store.png\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "2b330dce-b311-4d1f-9182-d84b43a94c54",
              "parentUUID": "e6d56949-830a-49a9-85bc-61c83f078762",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a560727-d379-4d89-a850-e0cf31958c41",
            "34e72826-2803-4e62-a55b-915793e74432",
            "c000e474-7bcf-482e-9968-c2423c995c87",
            "1f5283ba-ec74-4aa9-9a2d-b494139b0d40",
            "9519c1ba-1234-4383-896e-88ee96b750aa",
            "2b330dce-b311-4d1f-9182-d84b43a94c54"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1626,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}