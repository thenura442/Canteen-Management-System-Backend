{
  "stats": {
    "suites": 5,
    "tests": 31,
    "passes": 31,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-13T06:12:24.463Z",
    "end": "2023-05-13T06:12:33.860Z",
    "duration": 9397,
    "testsRegistered": 31,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e8b022f6-811b-49aa-bf0c-7d4bf32a6d15",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6bfa3133-53f5-4e9c-a435-ae971bdf33d0",
          "title": "Common Routes Tests",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\common.tests.js",
          "file": "\\tests\\common.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return server status",
              "fullTitle": "Common Routes Tests should return server status",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .get('/')\n  .end((err, res) => {\n    res.should.have.status(200);\n    done();\n  });",
              "err": {},
              "uuid": "3c25f000-fb92-4758-b26f-0249ef9599c1",
              "parentUUID": "6bfa3133-53f5-4e9c-a435-ae971bdf33d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c25f000-fb92-4758-b26f-0249ef9599c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
          "title": "Customer Routes Tests Suite",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\customer.tests.js",
          "file": "\\tests\\customer.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "2db86eb9-08c8-4791-a0a2-c1c38f7a8734",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer created message as success",
              "fullTitle": "Customer Routes Tests Suite should return customer created message as success",
              "timedOut": false,
              "duration": 3308,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "f9d00fa7-2cc6-4d11-8fb6-2d46b6c8a82f",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Customer Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "7037b374-8711-40e8-a0f5-45d55efe1b9c",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Customer Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.first_name,res.body.first_name,err)\n    chai.assert.equal(mock.findObject.last_name,res.body.last_name,err)\n    chai.assert.equal(mock.findObject.nic,res.body.nic,err)\n    chai.assert.equal(mock.findObject.dob,res.body.dob,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.address,res.body.address,err)\n    chai.assert.equal(mock.findObject.access,res.body.access,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "1e7d6440-b30b-4576-816b-6440f95cad93",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "7a532cd9-c8a7-4d36-9f8b-9edbf027e690",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email needs to be valid",
              "fullTitle": "Customer Routes Tests Suite should return that email needs to be valid",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "705dfe8b-c8a5-440d-814a-2f0e45eb5260",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that mobile number needs 10 characters",
              "fullTitle": "Customer Routes Tests Suite should return that mobile number needs 10 characters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "b157c233-8eac-4dad-8153-d684c4fafd90",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Mobile and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer Mobile and return success",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/mobile')\n  .send({ email : \"tester122@gmail.com\" , mobile_no : \"0771193382\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "bb882894-d934-47fc-b23b-a5d2e4edb723",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Customer Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester123\" , new_password : \"tester1234\" , retype_new_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "6cf374f6-6bae-49ce-a16e-38838c5e823c",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Customer Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 281,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/password')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester12345\" , new_password : \"tester1234\" , retype_new_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "1e0f5c39-a9f0-45b8-896a-f61dd410cf67",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Customer Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "75a10693-d023-4c5a-a385-059709ac2378",
              "parentUUID": "7c2d5b0b-0b09-4699-a2d1-ce27b469197b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2db86eb9-08c8-4791-a0a2-c1c38f7a8734",
            "f9d00fa7-2cc6-4d11-8fb6-2d46b6c8a82f",
            "7037b374-8711-40e8-a0f5-45d55efe1b9c",
            "1e7d6440-b30b-4576-816b-6440f95cad93",
            "7a532cd9-c8a7-4d36-9f8b-9edbf027e690",
            "705dfe8b-c8a5-440d-814a-2f0e45eb5260",
            "b157c233-8eac-4dad-8153-d684c4fafd90",
            "bb882894-d934-47fc-b23b-a5d2e4edb723",
            "6cf374f6-6bae-49ce-a16e-38838c5e823c",
            "1e0f5c39-a9f0-45b8-896a-f61dd410cf67",
            "75a10693-d023-4c5a-a385-059709ac2378"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5250,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "c4663c13-0353-4235-903e-659b16fbd09e",
          "title": "Employee Routes Tests Suite",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\emplooyee.tests.js",
          "file": "\\tests\\emplooyee.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return customer email needs to be valid",
              "fullTitle": "Employee Routes Tests Suite should return customer email needs to be valid",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"email\" must be a valid email',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "c4b5685d-bb08-4c3e-a706-e307ef9187a9",
              "parentUUID": "c4663c13-0353-4235-903e-659b16fbd09e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return employee created message as success",
              "fullTitle": "Employee Routes Tests Suite should return employee created message as success",
              "timedOut": false,
              "duration": 491,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "2bf3b734-4f57-4f59-a3ba-510b7f99b97d",
              "parentUUID": "c4663c13-0353-4235-903e-659b16fbd09e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email already exists",
              "fullTitle": "Employee Routes Tests Suite should return that email already exists",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Email Already Exists!\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "07c7f027-6bb6-4e4e-8591-0d1084bd2926",
              "parentUUID": "c4663c13-0353-4235-903e-659b16fbd09e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the customer information",
              "fullTitle": "Employee Routes Tests Suite should return the customer information",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.first_name,res.body.first_name,err)\n    chai.assert.equal(mock.findObject.last_name,res.body.last_name,err)\n    chai.assert.equal(mock.findObject.nic,res.body.nic,err)\n    chai.assert.equal(mock.findObject.dob,res.body.dob,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.address,res.body.address,err)\n    chai.assert.equal(mock.findObject.access,res.body.access,err)\n    chai.assert.equal(mock.findObject.type,res.body.type,err)\n    chai.assert.equal(mock.findObject.vendor,res.body.vendor,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    done();\n});",
              "err": {},
              "uuid": "e77fa593-3f63-4adc-8a5e-b30b375423d3",
              "parentUUID": "c4663c13-0353-4235-903e-659b16fbd09e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer details and return success",
              "fullTitle": "Employee Routes Tests Suite should update customer details and return success",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "ee0d7aa4-9a8c-42d1-9325-0a1628bbdfd3",
              "parentUUID": "c4663c13-0353-4235-903e-659b16fbd09e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return that email needs to be valid",
              "fullTitle": "Employee Routes Tests Suite should return that email needs to be valid",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"mobile_no\" length must be at least 10 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "3f7d114f-da01-46d1-bbbb-700d397bfb4b",
              "parentUUID": "c4663c13-0353-4235-903e-659b16fbd09e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update customer Password and return success",
              "fullTitle": "Employee Routes Tests Suite should update customer Password and return success",
              "timedOut": false,
              "duration": 566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/pass')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester123\" , new_password : \"tester1234\" , retype_new_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "2289650f-8a2b-4cb9-aacd-34885f809188",
              "parentUUID": "c4663c13-0353-4235-903e-659b16fbd09e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return customer Old Password is not valid",
              "fullTitle": "Employee Routes Tests Suite should return customer Old Password is not valid",
              "timedOut": false,
              "duration": 287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/pass')\n  .send({ email : \"tester122@gmail.com\" , old_password : \"tester12345\" , new_password : \"tester1234\" , retype_new_password : \"tester1234\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"Please Enter the Valid Old Password\",res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "2109d5dc-a412-454b-92d1-3385a7845625",
              "parentUUID": "c4663c13-0353-4235-903e-659b16fbd09e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete customer record that was created",
              "fullTitle": "Employee Routes Tests Suite should delete customer record that was created",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({email : \"tester122@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "29d83e8e-9663-42d7-a09b-6a5102494667",
              "parentUUID": "c4663c13-0353-4235-903e-659b16fbd09e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4b5685d-bb08-4c3e-a706-e307ef9187a9",
            "2bf3b734-4f57-4f59-a3ba-510b7f99b97d",
            "07c7f027-6bb6-4e4e-8591-0d1084bd2926",
            "e77fa593-3f63-4adc-8a5e-b30b375423d3",
            "ee0d7aa4-9a8c-42d1-9325-0a1628bbdfd3",
            "3f7d114f-da01-46d1-bbbb-700d397bfb4b",
            "2289650f-8a2b-4cb9-aacd-34885f809188",
            "2109d5dc-a412-454b-92d1-3385a7845625",
            "29d83e8e-9663-42d7-a09b-6a5102494667"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2184,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "4bd23aa9-5721-4d14-8a26-52a7fda42ca6",
          "title": "Item Routes Tests Suite",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\item.tests.js",
          "file": "\\tests\\item.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return item description needs to be atleast 6 letters long",
              "fullTitle": "Item Routes Tests Suite should return item description needs to be atleast 6 letters long",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"description\" length must be at least 6 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "3d2b0a1e-7860-455f-86f1-396510d7dbb3",
              "parentUUID": "4bd23aa9-5721-4d14-8a26-52a7fda42ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return item created message as success and its ID",
              "fullTitle": "Item Routes Tests Suite should return item created message as success and its ID",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "98b8d4e6-4fc6-46d7-a65c-67440611d390",
              "parentUUID": "4bd23aa9-5721-4d14-8a26-52a7fda42ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the item information",
              "fullTitle": "Item Routes Tests Suite should return the item information",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({id : \"I-121212_Test\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.id,res.body.id,err)\n    chai.assert.equal(mock.findObject.item_name,res.body.item_name,err)\n    chai.assert.equal(mock.findObject.vendor,res.body.vendor,err)\n    chai.assert.equal(mock.findObject.description,res.body.description,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    chai.assert.equal(mock.findObject.type,res.body.type,err)\n    chai.assert.equal(mock.findObject.meal_type,res.body.meal_type,err)\n    chai.assert.equal(mock.findObject.price,res.body.price,err)\n    chai.assert.equal(mock.findObject.availability,res.body.availability,err)\n    done();\n});",
              "err": {},
              "uuid": "a4d0d65b-c8bd-49f2-9eb9-abb8c86d042e",
              "parentUUID": "4bd23aa9-5721-4d14-8a26-52a7fda42ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the search List including only the test item",
              "fullTitle": "Item Routes Tests Suite should return the search List including only the test item",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/search/list')\n  .send({search : \"Test Item Name\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(1,res.body.length ,err)\n    done();\n});",
              "err": {},
              "uuid": "dab8ed13-ea98-4f27-bbed-8e3c6d791e9b",
              "parentUUID": "4bd23aa9-5721-4d14-8a26-52a7fda42ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update item details and return success",
              "fullTitle": "Item Routes Tests Suite should update item details and return success",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/update/id')\n  .send(mock.updateObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "c3ea7f95-9c76-486e-b521-613b134fb031",
              "parentUUID": "4bd23aa9-5721-4d14-8a26-52a7fda42ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete Item record that was created",
              "fullTitle": "Item Routes Tests Suite should delete Item record that was created",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({id : \"I-121212_Test\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "59a71129-6f3d-49e0-b9cc-e458090eeaee",
              "parentUUID": "4bd23aa9-5721-4d14-8a26-52a7fda42ca6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d2b0a1e-7860-455f-86f1-396510d7dbb3",
            "98b8d4e6-4fc6-46d7-a65c-67440611d390",
            "a4d0d65b-c8bd-49f2-9eb9-abb8c86d042e",
            "dab8ed13-ea98-4f27-bbed-8e3c6d791e9b",
            "c3ea7f95-9c76-486e-b521-613b134fb031",
            "59a71129-6f3d-49e0-b9cc-e458090eeaee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1049,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "807bb8dd-8885-44f4-9446-f2ebc95e754b",
          "title": "Vendor Routes Tests Suite",
          "fullFile": "G:\\Respo-Folder\\Visual Studio Code\\Canteen Management System\\Web Application\\express-backend\\tests\\vendor.tests.js",
          "file": "\\tests\\vendor.tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return Vendor description needs to be atleast 6 letters long",
              "fullTitle": "Vendor Routes Tests Suite should return Vendor description needs to be atleast 6 letters long",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockFalseObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal('\"description\" length must be at least 6 characters long',res.body.Error,err)\n    done();\n});",
              "err": {},
              "uuid": "7d5694b4-8ac3-405d-b888-fcf2e9b3fe05",
              "parentUUID": "807bb8dd-8885-44f4-9446-f2ebc95e754b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return vendor created message as success",
              "fullTitle": "Vendor Routes Tests Suite should return vendor created message as success",
              "timedOut": false,
              "duration": 430,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/register')\n  .send(mock.mockObject)\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "fdf46e6c-529f-41f1-8127-1fab0c6233ff",
              "parentUUID": "807bb8dd-8885-44f4-9446-f2ebc95e754b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the vendor information",
              "fullTitle": "Vendor Routes Tests Suite should return the vendor information",
              "timedOut": false,
              "duration": 205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/get/id')\n  .send({email : \"teststore@gmail.com\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(mock.findObject.vendor_name,res.body.vendor_name,err)\n    chai.assert.equal(mock.findObject.email,res.body.email,err)\n    chai.assert.equal(mock.findObject.description,res.body.description,err)\n    chai.assert.equal(mock.findObject.url,res.body.url,err)\n    chai.assert.equal(mock.findObject.mobile_no,res.body.mobile_no,err)\n    chai.assert.equal(mock.findObject.access,res.body.access,err)\n    done();\n});",
              "err": {},
              "uuid": "b70b4f28-ae08-4906-8ea2-e483e4de152b",
              "parentUUID": "807bb8dd-8885-44f4-9446-f2ebc95e754b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete vendor record that was created",
              "fullTitle": "Vendor Routes Tests Suite should delete vendor record that was created",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai\n  .request(app)\n  .post(api+'/delete/id')\n  .send({email : \"teststore@gmail.com\" , url : \"https://canteen-management-system-nsbm.s3.ap-south-1.amazonaws.com/test_store.png\"})\n  .end((err, res) => {\n    res.should.have.status(200);\n    chai.assert.equal(\"success\",res.body.message,err)\n    done();\n});",
              "err": {},
              "uuid": "7505db59-dbc7-4b6c-8498-c53cafb48aa8",
              "parentUUID": "807bb8dd-8885-44f4-9446-f2ebc95e754b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d5694b4-8ac3-405d-b888-fcf2e9b3fe05",
            "fdf46e6c-529f-41f1-8127-1fab0c6233ff",
            "b70b4f28-ae08-4906-8ea2-e483e4de152b",
            "7505db59-dbc7-4b6c-8498-c53cafb48aa8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 852,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}